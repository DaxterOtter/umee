// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gravity/v1/types.proto

package upgradev6x0

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package


// IBCMetadataProposal defines a custom governance proposal type that allows governance to set the
// metadata for an IBC token, this will allow Gravity to deploy an ERC20 representing this token on
// Ethereum
// Name: the token name
// Symbol: the token symbol
// Description: the token description, not sent to ETH at all, only used on Cosmos
// Display: the token display name (only used on Cosmos to decide ERC20 Decimals)
// Deicmals: the decimals for the display unit
// ibc_denom is the denom of the token in question on this chain
type IBCMetadataProposal struct {
	Title       string         `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string         `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Metadata    types.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata"`
	IbcDenom    string         `protobuf:"bytes,4,opt,name=ibc_denom,json=ibcDenom,proto3" json:"ibc_denom,omitempty"`
}

func (m *IBCMetadataProposal) Reset()      { *m = IBCMetadataProposal{} }
func (*IBCMetadataProposal) ProtoMessage() {}
func (*IBCMetadataProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_163831c23fcc179f, []int{6}
}
func (m *IBCMetadataProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IBCMetadataProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IBCMetadataProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IBCMetadataProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IBCMetadataProposal.Merge(m, src)
}
func (m *IBCMetadataProposal) XXX_Size() int {
	return m.Size()
}
func (m *IBCMetadataProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_IBCMetadataProposal.DiscardUnknown(m)
}

var xxx_messageInfo_IBCMetadataProposal proto.InternalMessageInfo


func init() {
	proto.RegisterType((*IBCMetadataProposal)(nil), "gravity.v1.IBCMetadataProposal")
}

func init() { proto.RegisterFile("gravity/v1/types.proto", fileDescriptor_163831c23fcc179f) }

var fileDescriptor_163831c23fcc179f = []byte{
	// 747 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xbd, 0x6f, 0xdb, 0x46,
	0x14, 0x17, 0x2d, 0xc9, 0xb6, 0x4e, 0x2a, 0xd4, 0xd2, 0x1f, 0x50, 0x6b, 0x94, 0x52, 0x35, 0x14,
	0xea, 0x60, 0xd2, 0x52, 0x37, 0x77, 0x30, 0x24, 0xd5, 0x6d, 0x0d, 0xf4, 0xc3, 0x60, 0x5d, 0x03,
	0xed, 0x42, 0x1c, 0xc9, 0x57, 0xea, 0x20, 0xf2, 0x4e, 0x38, 0x9e, 0xe4, 0x78, 0xca, 0x14, 0x20,
	0x63, 0xc6, 0x8c, 0xde, 0xf2, 0x17, 0x64, 0xc8, 0x7f, 0xe0, 0xd1, 0x63, 0x90, 0xc1, 0x08, 0xec,
	0x25, 0x40, 0xfe, 0x89, 0xe0, 0x3e, 0x24, 0xcb, 0xce, 0xe8, 0x89, 0xfc, 0xfd, 0xee, 0x7d, 0xfc,
	0xde, 0xbb, 0xf7, 0x0e, 0x6d, 0x27, 0x1c, 0xcf, 0x88, 0x38, 0xf7, 0x66, 0x5d, 0x4f, 0x9c, 0x4f,
	0x20, 0x77, 0x27, 0x9c, 0x09, 0x66, 0x23, 0xc3, 0xbb, 0xb3, 0xee, 0x37, 0x4e, 0xc4, 0xf2, 0x8c,
	0xe5, 0x5e, 0x88, 0x73, 0xf0, 0x66, 0xdd, 0x10, 0x04, 0xee, 0x7a, 0x11, 0x23, 0x54, 0xdb, 0x2e,
	0x9d, 0xd3, 0xf1, 0xe2, 0x5c, 0x02, 0x73, 0xbe, 0x99, 0xb0, 0x84, 0xa9, 0x5f, 0x4f, 0xfe, 0x69,
	0xb6, 0xed, 0xa3, 0xfa, 0x80, 0x93, 0x38, 0x81, 0x53, 0x9c, 0x92, 0x18, 0x0b, 0xc6, 0xed, 0x4d,
	0x54, 0x9e, 0xb0, 0x33, 0xe0, 0x0d, 0xab, 0x65, 0x75, 0x4a, 0xbe, 0x06, 0xf6, 0x0f, 0xe8, 0x4b,
	0x10, 0x23, 0xe0, 0x30, 0xcd, 0x02, 0x1c, 0xc7, 0x1c, 0xf2, 0xbc, 0xb1, 0xd2, 0xb2, 0x3a, 0x15,
	0xbf, 0x3e, 0xe7, 0xfb, 0x9a, 0x6e, 0x7f, 0xb4, 0xd0, 0xea, 0x29, 0x4e, 0x73, 0x10, 0x32, 0x16,
	0x65, 0x34, 0x82, 0x79, 0x2c, 0x05, 0xec, 0x9f, 0xd0, 0x5a, 0x06, 0x59, 0x08, 0x5c, 0x86, 0x28,
	0x76, 0xaa, 0xbd, 0x1d, 0xf7, 0xae, 0x50, 0xf7, 0x81, 0x9e, 0x41, 0xe9, 0xf2, 0xba, 0x59, 0xf0,
	0xe7, 0x1e, 0xf6, 0x36, 0x5a, 0x1d, 0x01, 0x49, 0x46, 0xa2, 0x51, 0x54, 0x31, 0x0d, 0xb2, 0xff,
	0x46, 0x5f, 0x70, 0x38, 0xc3, 0x3c, 0x0e, 0x70, 0xc6, 0xa6, 0x54, 0x34, 0x4a, 0x52, 0xdd, 0xc0,
	0x95, 0xde, 0xef, 0xae, 0x9b, 0xdf, 0x27, 0x44, 0x8c, 0xa6, 0xa1, 0x1b, 0xb1, 0xcc, 0x33, 0x9d,
	0xd2, 0x9f, 0xdd, 0x3c, 0x1e, 0x9b, 0xa6, 0x1f, 0x51, 0xe1, 0xd7, 0x74, 0x90, 0xbe, 0x8a, 0x61,
	0x7f, 0x87, 0x0c, 0x0e, 0x04, 0x1b, 0x03, 0x6d, 0x94, 0x55, 0xc5, 0x55, 0xcd, 0x9d, 0x48, 0xaa,
	0xfd, 0xcc, 0x42, 0xcd, 0xdf, 0x71, 0x2e, 0xfe, 0x0a, 0x73, 0xe0, 0x33, 0x88, 0x0f, 0x4d, 0x37,
	0x06, 0x29, 0x8b, 0xc6, 0xbf, 0x69, 0x6d, 0x2e, 0xda, 0xd0, 0xc9, 0x82, 0x50, 0xb2, 0x81, 0x29,
	0x40, 0x37, 0xe5, 0x2b, 0x7d, 0xb4, 0x6c, 0xdf, 0x43, 0x5b, 0x8b, 0x66, 0xdf, 0xf3, 0x58, 0x51,
	0x1e, 0x1b, 0xf0, 0x79, 0x8e, 0xf6, 0x3e, 0xaa, 0x1d, 0xfa, 0xc3, 0xde, 0xde, 0x09, 0xfb, 0x19,
	0x28, 0xcb, 0x64, 0xeb, 0x81, 0x47, 0xbd, 0x3d, 0x95, 0xa5, 0xe2, 0x6b, 0x20, 0xd9, 0x58, 0x1e,
	0x9b, 0xbb, 0xd3, 0xa0, 0xfd, 0x14, 0x6d, 0xfe, 0x43, 0x47, 0x38, 0x15, 0xba, 0xf7, 0xc7, 0x9c,
	0x4d, 0x58, 0x8e, 0x53, 0x69, 0x2d, 0x88, 0x48, 0x61, 0x1e, 0x43, 0x01, 0xbb, 0x85, 0xaa, 0x31,
	0xe4, 0x11, 0x27, 0x13, 0x41, 0x18, 0x35, 0x91, 0x96, 0x29, 0xd9, 0x36, 0x81, 0x79, 0x02, 0x22,
	0xd0, 0xb7, 0x5f, 0x52, 0xb2, 0xab, 0x9a, 0xfb, 0x53, 0x52, 0xfb, 0xb5, 0xe7, 0x17, 0xcd, 0xc2,
	0xcb, 0x8b, 0x66, 0xe1, 0xc3, 0x45, 0xd3, 0x6a, 0xbf, 0xb2, 0x50, 0xbd, 0x4f, 0x78, 0xcc, 0xd9,
	0xe4, 0xd1, 0xc9, 0x17, 0x25, 0x16, 0x97, 0x4a, 0xb4, 0x1d, 0x84, 0x38, 0x44, 0x64, 0x42, 0x80,
	0x8a, 0x5c, 0x09, 0xaa, 0xf9, 0x4b, 0x8c, 0xdd, 0x40, 0x6b, 0x7a, 0x6e, 0xf2, 0x46, 0xb9, 0x55,
	0xec, 0x94, 0xfc, 0x39, 0x7c, 0xa0, 0xf4, 0x8d, 0x85, 0x36, 0x8e, 0x06, 0xc3, 0x3f, 0x40, 0xe0,
	0x18, 0x0b, 0xfc, 0x68, 0xb5, 0x07, 0x68, 0x3d, 0x33, 0xb1, 0x94, 0xe0, 0x6a, 0xef, 0x5b, 0x57,
	0x0f, 0x84, 0xab, 0x96, 0xd7, 0x6c, 0xb2, 0x3b, 0x4f, 0x68, 0xd6, 0x61, 0xe1, 0x64, 0xef, 0xa0,
	0x0a, 0x09, 0xa3, 0x40, 0x97, 0xac, 0x66, 0xde, 0x5f, 0x27, 0x61, 0xa4, 0x86, 0xe0, 0x9e, 0xf6,
	0x42, 0xfb, 0xb5, 0x85, 0xb6, 0x8e, 0x81, 0xc6, 0x84, 0x26, 0x47, 0x61, 0xd4, 0x9f, 0x0a, 0xf6,
	0x0b, 0xe3, 0x72, 0x92, 0xe5, 0x76, 0xff, 0xcf, 0x38, 0x90, 0x84, 0x06, 0x1c, 0x22, 0x20, 0x33,
	0xb3, 0xfe, 0x15, 0xbf, 0x6e, 0x78, 0xdf, 0xd0, 0xb6, 0x87, 0xca, 0x7a, 0x17, 0x56, 0x94, 0xda,
	0xaf, 0xef, 0xd4, 0xe6, 0xb0, 0x50, 0x3b, 0x64, 0x84, 0xfa, 0xda, 0xce, 0x6e, 0xa2, 0xaa, 0x14,
	0x18, 0x8d, 0x30, 0xa5, 0x90, 0x9a, 0x5b, 0x41, 0x24, 0x8c, 0x86, 0x9a, 0x91, 0x06, 0x30, 0x03,
	0x7a, 0x7f, 0x58, 0x90, 0xa2, 0xd4, 0xac, 0x0c, 0xfe, 0xbd, 0xbc, 0x71, 0xac, 0xab, 0x1b, 0xc7,
	0x7a, 0x7f, 0xe3, 0x58, 0x2f, 0x6e, 0x9d, 0xc2, 0xd5, 0xad, 0x53, 0x78, 0x7b, 0xeb, 0x14, 0xfe,
	0x3b, 0x58, 0xda, 0xea, 0x5f, 0xf5, 0x13, 0xb2, 0xab, 0x67, 0xf8, 0x21, 0xcc, 0x58, 0x3c, 0x4d,
	0xc1, 0x7b, 0xe2, 0xcd, 0x9f, 0x5a, 0xb5, 0xf2, 0xe1, 0xaa, 0x7a, 0x06, 0x7f, 0xfc, 0x14, 0x00,
	0x00, 0xff, 0xff, 0x11, 0x9a, 0x06, 0xeb, 0x82, 0x05, 0x00, 0x00,
}

func (m *IBCMetadataProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IBCMetadataProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCMetadataProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IbcDenom) > 0 {
		i -= len(m.IbcDenom)
		copy(dAtA[i:], m.IbcDenom)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.IbcDenom)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *IBCMetadataProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Metadata.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.IbcDenom)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}


func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *IBCMetadataProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IBCMetadataProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IBCMetadataProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)