syntax = "proto3";
package umeenetwork.umee.metoken.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "umee/metoken/v1/query.proto";

option go_package = "github.com/umee-network/umee/v4/x/metoken";

option (gogoproto.goproto_getters_all) = false;

// EventSwap is emitted on Msg/Swap
message EventSwap {
  // meToken recipient bech32 address.
  string recipient = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // Asset provided for the swap.
  cosmos.base.v1beta1.Coin asset = 2 [(gogoproto.nullable) = false];
  // meToken received by the recipient in exchange for the provided asset.
  cosmos.base.v1beta1.Coin metoken = 3 [(gogoproto.nullable) = false];
}

// EventRedeem is emitted on Msg/Redeem
message EventRedeem {
  // Asset recipient bech32 address.
  string recipient = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // meToken provided for the redemption.
  cosmos.base.v1beta1.Coin metoken = 2 [(gogoproto.nullable) = false];
  // Asset received by the recipient in exchange for the provided meToken.
  cosmos.base.v1beta1.Coin asset = 3 [(gogoproto.nullable) = false];
}

// EventRebalancing is emitted when a reserve re-balancing occurs.
message EventRebalancing {
  // Initial liquidity of every asset in the Index before re-balancing.
  repeated IndexLiquidity initial_liquidity = 1 [(gogoproto.nullable) = false];
  // Resultant liquidity of every asset in the Index after re-balancing.
  repeated IndexLiquidity resultant_liquidity = 2 [(gogoproto.nullable) = false];
}