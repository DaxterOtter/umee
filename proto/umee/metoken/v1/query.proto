syntax = "proto3";
package umeenetwork.umee.metoken.v1;

import "google/api/annotations.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "umee/metoken/v1/metoken.proto";

option go_package = "github.com/umee-network/umee/v4/x/metoken";

option (gogoproto.goproto_getters_all) = false;

// Query defines the gRPC querier service.
service Query {
  // Params queries the parameters of the x/metoken module.
  rpc Params(QueryParams) returns (QueryParamsResponse) {
    option (google.api.http).get = "/umee/metoken/v1/params";
  }

  // RegisteredIndexes queries for a specific or all the registered indexes.
  rpc RegisteredIndexes(QueryRegisteredIndexes)
      returns (QueryRegisteredIndexesResponse) {
    option (google.api.http).get = "/umee/metoken/v1/registered_indexes";
  }

  // Fee queries for fee to be applied to a swap or a redemption.
  rpc Fee(QueryFee)
      returns (QueryFeeResponse) {
    option (google.api.http).get = "/umee/metoken/v1/fee";
  }

  // IndexLiquidity queries for Index's liquidity of a specific or all the registered indexes.
  rpc IndexLiquidity(QueryIndexLiquidity)
      returns (QueryIndexLiquidityResponse) {
    option (google.api.http).get = "/umee/metoken/v1/index_liquidity";
  }
}

// QueryParams defines the request structure for the Params gRPC service
// handler.
message QueryParams {}

// QueryParamsResponse defines the response structure for the Params gRPC
// service handler.
message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryRegisteredIndexes defines the request structure for the RegisteredIndexes
// gRPC service handler.
message QueryRegisteredIndexes {
  string metoken_denom = 1;
}

// QueryRegisteredIndexesResponse defines the response structure for the
// RegisteredIndexes gRPC service handler.
message QueryRegisteredIndexesResponse {
  repeated Index registry = 1 [(gogoproto.nullable) = false];
}

// QueryFee defines the request structure for the Fee gRPC service handler.
message QueryFee {
  string                   metoken_denom = 1;
  string                   operation     = 2;
  cosmos.base.v1beta1.Coin asset         = 3 [(gogoproto.nullable) = false];
}

// QueryFee defines the response structure for the Fee gRPC service handler.
message QueryFeeResponse {
  cosmos.base.v1beta1.Coin asset = 1 [(gogoproto.nullable) = false];
}

// QueryIndexLiquidity defines the request structure for the IndexLiquidity
// gRPC service handler.
message QueryIndexLiquidity {
  string metoken_denom = 1;
}

// QueryIndexLiquidityResponse defines the response structure for the
// IndexLiquidity gRPC service handler.
message QueryIndexLiquidityResponse {
  repeated IndexLiquidity index_liquidity = 1 [(gogoproto.nullable) = false];
}

// IndexLiquidity defines the structure for informing the state of an Index in therms of liquidity.
message IndexLiquidity {
  cosmos.base.v1beta1.Coin metoken_minted             = 1;
  repeated cosmos.base.v1beta1.Coin asset_in_leverage = 2;
  repeated cosmos.base.v1beta1.Coin asset_in_reserves = 3;
  repeated cosmos.base.v1beta1.Coin asset_in_fees     = 4;
}