syntax = "proto3";
package umee.refileverage.v1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "umee/refileverage/v1/leverage.proto";

option go_package = "github.com/umee-network/umee/v5/x/refileverage/types";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.messagename_all)     = true;

// Msg defines the x/refileverage module's Msg service.
service Msg {
  // MaxWithdraw moves previously supplied tokens from the module back to the user balance in
  // exchange for burning uTokens. It automatically calculates the maximum valid amount to withdraw.
  // Zero is returned if no more tokens can be withdrawn.
  rpc MaxWithdraw(MsgMaxWithdraw) returns (MsgMaxWithdrawResponse);

  // SupplyCollateral combines the Supply and Collateralize actions.
  rpc SupplyCollateral(MsgSupplyCollateral) returns (MsgSupplyCollateralResponse);

  // Decollateralize disables selected uTokens as collateral. They are returned to the user's
  // balance from the module.
  rpc Decollateralize(MsgDecollateralize) returns (MsgDecollateralizeResponse);

  // Borrow allows a user to borrow tokens from the module if they have sufficient collateral.
  rpc Borrow(MsgBorrow) returns (MsgBorrowResponse);

  // Repay allows a user to repay previously borrowed tokens and interest.
  rpc Repay(MsgRepay) returns (MsgRepayResponse);

  // Liquidate allows a user to repay a different user's borrowed coins in exchange for some
  // of the target's collateral.
  rpc Liquidate(MsgLiquidate) returns (MsgLiquidateResponse);

  // GovUpdateRegistry adds new tokens to the token registry or
  // updates existing tokens with new settings.
  rpc GovUpdateRegistry(MsgGovUpdateRegistry) returns (MsgGovUpdateRegistryResponse);
}

// MsgMaxWithdraw represents a user's request to withdraw the maximum valid amount of supplied assets.
message MsgMaxWithdraw {
  // Supplier is the account address withdrawing assets and the signer of the message.
  string supplier = 1;
  // Denom is base token denom to withdraw
  string denom = 2;
}

// MsgMaxWithdrawResponse defines the Msg/MaxWithdraw response type.
message MsgMaxWithdrawResponse {
  // Withdrawn is the amount of uTokens withdrawn.
  cosmos.base.v1beta1.Coin withdrawn = 1 [(gogoproto.nullable) = false];
  // Received is the amount of base tokens received.
  cosmos.base.v1beta1.Coin received = 2 [(gogoproto.nullable) = false];
}

// MsgBorrow represents a user's request to borrow a base asset type
// from the module.
message MsgBorrow {
  // Borrower is the account address taking a loan and the signer
  // of the message.
  string borrower      = 1;
  string eth_recipient = 2;
  string amount        = 3
      [(cosmos_proto.scalar) = "cosmos.Int", (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
}

// MsgBorrowResponse defines the Msg/Borrow response type.
message MsgBorrowResponse {}

// MsgDecollateralize represents a user's request to disable selected
// uTokens as collateral.
message MsgDecollateralize {
  // Borrower is the account address removing collateral and the signer of the message.
  string                   borrower = 1;
  cosmos.base.v1beta1.Coin asset    = 2 [(gogoproto.nullable) = false];
}

// MsgRepay represents a user's request to repay a borrowed base asset
// type to the module.
message MsgRepay {
  // Borrower is the account address repaying a loan and the signer
  // of the message.
  string borrower = 1;
  string amount   = 3
      [(cosmos_proto.scalar) = "cosmos.Int", (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
}

// MsgDecollateralizeResponse defines the Msg/Decollateralize response type.
message MsgDecollateralizeResponse {}

// MsgRepayResponse defines the Msg/Repay response type.
message MsgRepayResponse {
  // Repaid is the amount of base tokens repaid to the module.
  string repaid = 1 [(cosmos_proto.scalar) = "cosmos.Int", (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
}

// MsgLiquidate is the request structure for the Liquidate RPC.
message MsgLiquidate {
  // Liquidator is the account address performing a liquidation and the signer
  // of the message.
  string liquidator = 1;
  // Borrower is the account whose borrow is being repaid, and collateral consumed,
  // by the liquidation. It does not sign the message.
  string borrower = 2;
  // Repayment is the maximum amount of base tokens that the liquidator is willing
  // to repay.
  string repayment = 3 [(cosmos_proto.scalar) = "cosmos.Int", (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  // RewardDenom is the denom that the liquidator will receive as a liquidation reward.
  // If it is a uToken, the liquidator will receive uTokens from the borrower's
  // collateral. If it is a base token, the uTokens will be redeemed directly at
  // a reduced Liquidation Incentive, and the liquidator will receive base tokens.
  string reward_denom = 4;
}

// MsgSupplyCollateral represents a user's request to supply and collateralize assets to the module.
message MsgSupplyCollateral {
  // Supplier is the account address supplying assets and the signer of the message.
  string                   supplier = 1;
  cosmos.base.v1beta1.Coin asset    = 2 [(gogoproto.nullable) = false];
}

// MsgSupplyCollateralResponse defines the Msg/SupplyCollateral response type.
message MsgSupplyCollateralResponse {
  // Collateralized is the amount of uTokens collateralized.
  cosmos.base.v1beta1.Coin collateralized = 1 [(gogoproto.nullable) = false];
}

// MsgLiquidateResponse defines the Msg/Liquidate response type.
message MsgLiquidateResponse {
  // Repaid is the amount of borrowed base tokens that the liquidator repaid
  // to the module on behalf of the borrower.
  string repaid = 1 [(cosmos_proto.scalar) = "cosmos.Int", (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  // Collateral is the amount of the borrower's uToken collateral that
  // was liquidated.
  cosmos.base.v1beta1.Coin collateral = 2 [(gogoproto.nullable) = false];
  // Reward is the amount of base tokens that the liquidator received from
  // the module as reward for the liquidation.
  cosmos.base.v1beta1.Coin reward = 3 [(gogoproto.nullable) = false];
}

// MsgGovUpdateRegistry defines the Msg/GovUpdateRegistry request type.
message MsgGovUpdateRegistry {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer) = false;
  option (cosmos.msg.v1.signer)       = "authority";

  // authority is the address of the governance account.
  string authority   = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string title       = 2;
  string description = 3;
  // add_tokens defines new token settings.
  repeated Token add_tokens = 4 [(gogoproto.nullable) = false];
  // update_tokens defines the new settings for existed tokens.
  repeated Token update_tokens = 5 [(gogoproto.nullable) = false];
}

// MsgGovUpdateRegistryResponse defines the Msg/GovUpdateRegistry response type.
message MsgGovUpdateRegistryResponse {}
