// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/metoken/v1/query.proto

package metoken

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParams defines the request structure for the Params gRPC service
// handler.
type QueryParams struct {
}

func (m *QueryParams) Reset()         { *m = QueryParams{} }
func (m *QueryParams) String() string { return proto.CompactTextString(m) }
func (*QueryParams) ProtoMessage()    {}
func (*QueryParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f141a376167f31d, []int{0}
}
func (m *QueryParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParams.Merge(m, src)
}
func (m *QueryParams) XXX_Size() int {
	return m.Size()
}
func (m *QueryParams) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParams.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParams proto.InternalMessageInfo

// QueryParamsResponse defines the response structure for the Params gRPC
// service handler.
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f141a376167f31d, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

// QueryRegisteredIndexes defines the request structure for the RegisteredIndexes
// gRPC service handler.
type QueryRegisteredIndexes struct {
	MetokenDenom string `protobuf:"bytes,1,opt,name=metoken_denom,json=metokenDenom,proto3" json:"metoken_denom,omitempty"`
}

func (m *QueryRegisteredIndexes) Reset()         { *m = QueryRegisteredIndexes{} }
func (m *QueryRegisteredIndexes) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredIndexes) ProtoMessage()    {}
func (*QueryRegisteredIndexes) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f141a376167f31d, []int{2}
}
func (m *QueryRegisteredIndexes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredIndexes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredIndexes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredIndexes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredIndexes.Merge(m, src)
}
func (m *QueryRegisteredIndexes) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredIndexes) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredIndexes.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredIndexes proto.InternalMessageInfo

// QueryRegisteredIndexesResponse defines the response structure for the
// RegisteredIndexes gRPC service handler.
type QueryRegisteredIndexesResponse struct {
	Registry []Index `protobuf:"bytes,1,rep,name=registry,proto3" json:"registry"`
}

func (m *QueryRegisteredIndexesResponse) Reset()         { *m = QueryRegisteredIndexesResponse{} }
func (m *QueryRegisteredIndexesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredIndexesResponse) ProtoMessage()    {}
func (*QueryRegisteredIndexesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f141a376167f31d, []int{3}
}
func (m *QueryRegisteredIndexesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredIndexesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredIndexesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredIndexesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredIndexesResponse.Merge(m, src)
}
func (m *QueryRegisteredIndexesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredIndexesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredIndexesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredIndexesResponse proto.InternalMessageInfo

// QueryFee defines the request structure for the Fee gRPC service handler.
type QueryFee struct {
	MetokenDenom string     `protobuf:"bytes,1,opt,name=metoken_denom,json=metokenDenom,proto3" json:"metoken_denom,omitempty"`
	Operation    string     `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
	Asset        types.Coin `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset"`
}

func (m *QueryFee) Reset()         { *m = QueryFee{} }
func (m *QueryFee) String() string { return proto.CompactTextString(m) }
func (*QueryFee) ProtoMessage()    {}
func (*QueryFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f141a376167f31d, []int{4}
}
func (m *QueryFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFee.Merge(m, src)
}
func (m *QueryFee) XXX_Size() int {
	return m.Size()
}
func (m *QueryFee) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFee.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFee proto.InternalMessageInfo

// QueryFee defines the response structure for the Fee gRPC service handler.
type QueryFeeResponse struct {
	Asset types.Coin `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset"`
}

func (m *QueryFeeResponse) Reset()         { *m = QueryFeeResponse{} }
func (m *QueryFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeeResponse) ProtoMessage()    {}
func (*QueryFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f141a376167f31d, []int{5}
}
func (m *QueryFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeResponse.Merge(m, src)
}
func (m *QueryFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeResponse proto.InternalMessageInfo

// QueryIndexLiquidity defines the request structure for the IndexLiquidity
// gRPC service handler.
type QueryIndexLiquidity struct {
	MetokenDenom string `protobuf:"bytes,1,opt,name=metoken_denom,json=metokenDenom,proto3" json:"metoken_denom,omitempty"`
}

func (m *QueryIndexLiquidity) Reset()         { *m = QueryIndexLiquidity{} }
func (m *QueryIndexLiquidity) String() string { return proto.CompactTextString(m) }
func (*QueryIndexLiquidity) ProtoMessage()    {}
func (*QueryIndexLiquidity) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f141a376167f31d, []int{6}
}
func (m *QueryIndexLiquidity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIndexLiquidity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIndexLiquidity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIndexLiquidity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIndexLiquidity.Merge(m, src)
}
func (m *QueryIndexLiquidity) XXX_Size() int {
	return m.Size()
}
func (m *QueryIndexLiquidity) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIndexLiquidity.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIndexLiquidity proto.InternalMessageInfo

// QueryIndexLiquidityResponse defines the response structure for the
// IndexLiquidity gRPC service handler.
type QueryIndexLiquidityResponse struct {
	IndexLiquidity []IndexLiquidity `protobuf:"bytes,1,rep,name=index_liquidity,json=indexLiquidity,proto3" json:"index_liquidity"`
}

func (m *QueryIndexLiquidityResponse) Reset()         { *m = QueryIndexLiquidityResponse{} }
func (m *QueryIndexLiquidityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIndexLiquidityResponse) ProtoMessage()    {}
func (*QueryIndexLiquidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f141a376167f31d, []int{7}
}
func (m *QueryIndexLiquidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIndexLiquidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIndexLiquidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIndexLiquidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIndexLiquidityResponse.Merge(m, src)
}
func (m *QueryIndexLiquidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIndexLiquidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIndexLiquidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIndexLiquidityResponse proto.InternalMessageInfo

// IndexLiquidity defines the structure for informing the state of an Index in therms of liquidity.
type IndexLiquidity struct {
	MetokenMinted   *types.Coin   `protobuf:"bytes,1,opt,name=metoken_minted,json=metokenMinted,proto3" json:"metoken_minted,omitempty"`
	AssetInLeverage []*types.Coin `protobuf:"bytes,2,rep,name=asset_in_leverage,json=assetInLeverage,proto3" json:"asset_in_leverage,omitempty"`
	AssetInReserves []*types.Coin `protobuf:"bytes,3,rep,name=asset_in_reserves,json=assetInReserves,proto3" json:"asset_in_reserves,omitempty"`
	AssetInFees     []*types.Coin `protobuf:"bytes,4,rep,name=asset_in_fees,json=assetInFees,proto3" json:"asset_in_fees,omitempty"`
}

func (m *IndexLiquidity) Reset()         { *m = IndexLiquidity{} }
func (m *IndexLiquidity) String() string { return proto.CompactTextString(m) }
func (*IndexLiquidity) ProtoMessage()    {}
func (*IndexLiquidity) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f141a376167f31d, []int{8}
}
func (m *IndexLiquidity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexLiquidity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexLiquidity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexLiquidity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexLiquidity.Merge(m, src)
}
func (m *IndexLiquidity) XXX_Size() int {
	return m.Size()
}
func (m *IndexLiquidity) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexLiquidity.DiscardUnknown(m)
}

var xxx_messageInfo_IndexLiquidity proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryParams)(nil), "umeenetwork.umee.metoken.v1.QueryParams")
	proto.RegisterType((*QueryParamsResponse)(nil), "umeenetwork.umee.metoken.v1.QueryParamsResponse")
	proto.RegisterType((*QueryRegisteredIndexes)(nil), "umeenetwork.umee.metoken.v1.QueryRegisteredIndexes")
	proto.RegisterType((*QueryRegisteredIndexesResponse)(nil), "umeenetwork.umee.metoken.v1.QueryRegisteredIndexesResponse")
	proto.RegisterType((*QueryFee)(nil), "umeenetwork.umee.metoken.v1.QueryFee")
	proto.RegisterType((*QueryFeeResponse)(nil), "umeenetwork.umee.metoken.v1.QueryFeeResponse")
	proto.RegisterType((*QueryIndexLiquidity)(nil), "umeenetwork.umee.metoken.v1.QueryIndexLiquidity")
	proto.RegisterType((*QueryIndexLiquidityResponse)(nil), "umeenetwork.umee.metoken.v1.QueryIndexLiquidityResponse")
	proto.RegisterType((*IndexLiquidity)(nil), "umeenetwork.umee.metoken.v1.IndexLiquidity")
}

func init() { proto.RegisterFile("umee/metoken/v1/query.proto", fileDescriptor_2f141a376167f31d) }

var fileDescriptor_2f141a376167f31d = []byte{
	// 671 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0xc1, 0x4f, 0x13, 0x4f,
	0x14, 0xc7, 0xbb, 0x2d, 0x10, 0x98, 0xfe, 0x80, 0x1f, 0x23, 0xc1, 0xa5, 0xe0, 0x42, 0x96, 0x90,
	0xd4, 0x10, 0x76, 0x2d, 0x68, 0x62, 0x34, 0x24, 0x8a, 0x88, 0x21, 0xc1, 0x44, 0xf7, 0x64, 0xb8,
	0x34, 0x5b, 0xfa, 0x58, 0x27, 0xb0, 0x33, 0x65, 0x66, 0xbb, 0xd2, 0xab, 0xd1, 0xbb, 0x89, 0x7f,
	0x80, 0x37, 0xff, 0x00, 0xff, 0x0a, 0x8e, 0x24, 0x5e, 0x3c, 0x19, 0x05, 0x0f, 0xfe, 0x19, 0x66,
	0x67, 0x67, 0x57, 0xda, 0x25, 0xed, 0xe2, 0x6d, 0xfa, 0xde, 0xfb, 0x7e, 0xe7, 0x33, 0xef, 0xf5,
	0xb5, 0x68, 0xae, 0xed, 0x03, 0xd8, 0x3e, 0x04, 0xec, 0x10, 0xa8, 0x1d, 0xd6, 0xec, 0xe3, 0x36,
	0xf0, 0x8e, 0xd5, 0xe2, 0x2c, 0x60, 0x58, 0x26, 0x29, 0x04, 0x6f, 0x18, 0x3f, 0xb4, 0xa2, 0xb3,
	0xa5, 0x0a, 0xad, 0xb0, 0x56, 0x99, 0xf7, 0x18, 0xf3, 0x8e, 0xc0, 0x76, 0x5b, 0xc4, 0x76, 0x29,
	0x65, 0x81, 0x1b, 0x10, 0x46, 0x45, 0x2c, 0xad, 0x4c, 0x7b, 0xcc, 0x63, 0xf2, 0x68, 0x47, 0x27,
	0x15, 0x35, 0xf6, 0x99, 0xf0, 0x99, 0xb0, 0x1b, 0xae, 0x00, 0x3b, 0xac, 0x35, 0x20, 0x70, 0x6b,
	0xf6, 0x3e, 0x23, 0x54, 0xe5, 0x6f, 0xf5, 0xd2, 0x24, 0xf7, 0xc9, 0xb4, 0x39, 0x8e, 0xca, 0x2f,
	0x23, 0xbc, 0x17, 0x2e, 0x77, 0x7d, 0x61, 0xbe, 0x42, 0x37, 0x2e, 0x7d, 0x74, 0x40, 0xb4, 0x18,
	0x15, 0x80, 0x1f, 0xa3, 0x91, 0x96, 0x8c, 0xe8, 0xda, 0xa2, 0x56, 0x2d, 0xaf, 0x2d, 0x59, 0x7d,
	0x9e, 0x61, 0xc5, 0xe2, 0xcd, 0xa1, 0xd3, 0xef, 0x0b, 0x05, 0x47, 0x09, 0xcd, 0x0d, 0x34, 0x23,
	0x9d, 0x1d, 0xf0, 0x88, 0x08, 0x80, 0x43, 0x73, 0x87, 0x36, 0xe1, 0x04, 0x04, 0x5e, 0x42, 0xe3,
	0x4a, 0x5c, 0x6f, 0x02, 0x65, 0xbe, 0xbc, 0x63, 0xcc, 0xf9, 0x4f, 0x05, 0xb7, 0xa2, 0x98, 0x79,
	0x80, 0x8c, 0xab, 0xe5, 0x29, 0xe3, 0x16, 0x1a, 0xe5, 0x32, 0xc9, 0x3b, 0xba, 0xb6, 0x58, 0xaa,
	0x96, 0xd7, 0xcc, 0xbe, 0x94, 0x52, 0xaf, 0x20, 0x53, 0xa5, 0xf9, 0x4e, 0x43, 0xa3, 0xf2, 0xa2,
	0x6d, 0x80, 0x5c, 0x64, 0x78, 0x1e, 0x8d, 0xb1, 0x16, 0x70, 0x39, 0x2a, 0xbd, 0x28, 0x0b, 0xfe,
	0x06, 0xf0, 0x3d, 0x34, 0xec, 0x0a, 0x01, 0x81, 0x5e, 0x92, 0x8d, 0x9b, 0xb5, 0xe2, 0x71, 0x59,
	0xd1, 0xb8, 0x2c, 0x35, 0x2e, 0xeb, 0x09, 0x23, 0x54, 0x91, 0xc4, 0xd5, 0xe6, 0x0e, 0xfa, 0x3f,
	0xa1, 0x48, 0x1f, 0x98, 0x5a, 0x69, 0xd7, 0xb2, 0x7a, 0xa0, 0x46, 0x2a, 0xdf, 0xbb, 0x4b, 0x8e,
	0xdb, 0xa4, 0x49, 0x82, 0x4e, 0xbe, 0xae, 0x77, 0xd0, 0xdc, 0x15, 0xda, 0x94, 0x68, 0x0f, 0x4d,
	0x92, 0x28, 0x53, 0x3f, 0x4a, 0x52, 0xaa, 0xf3, 0x2b, 0x83, 0x3b, 0x9f, 0xba, 0x29, 0xda, 0x09,
	0xd2, 0x15, 0x35, 0x3f, 0x15, 0xd1, 0x44, 0x0f, 0xf2, 0x23, 0x34, 0x91, 0x20, 0xfb, 0x84, 0x06,
	0xd0, 0x1c, 0xd8, 0x09, 0x27, 0x79, 0xe3, 0x73, 0x59, 0x8f, 0x9f, 0xa2, 0x29, 0xd9, 0x94, 0x3a,
	0xa1, 0xf5, 0x23, 0x08, 0x81, 0xbb, 0x1e, 0xe8, 0x45, 0x89, 0xdc, 0xc7, 0x64, 0x52, 0x6a, 0x76,
	0xe8, 0xae, 0x52, 0x74, 0xd9, 0x70, 0x10, 0xc0, 0x43, 0x10, 0x7a, 0x29, 0xaf, 0x8d, 0xa3, 0x14,
	0x78, 0x03, 0x8d, 0xa7, 0x36, 0x07, 0x00, 0x42, 0x1f, 0x1a, 0x64, 0x51, 0x56, 0x16, 0xdb, 0x00,
	0x62, 0xed, 0xf7, 0x10, 0x1a, 0x96, 0xd3, 0xc1, 0xef, 0x35, 0x34, 0x12, 0x2f, 0x1d, 0xae, 0xf6,
	0xed, 0xfc, 0xa5, 0xdd, 0xae, 0xdc, 0xc9, 0x5b, 0x99, 0x8c, 0xdb, 0x5c, 0x78, 0xfb, 0xf5, 0xd7,
	0xc7, 0xe2, 0x2c, 0xbe, 0x69, 0xf7, 0xfe, 0xa6, 0xc4, 0x3b, 0x8e, 0xbf, 0x68, 0x68, 0x2a, 0xbb,
	0xdf, 0xeb, 0x83, 0x2f, 0xca, 0x88, 0x2a, 0x0f, 0xff, 0x41, 0x94, 0x82, 0xae, 0x48, 0xd0, 0x65,
	0xbc, 0x94, 0x01, 0xe5, 0xa9, 0xa6, 0x4e, 0x14, 0x5e, 0x07, 0x95, 0xa2, 0x5d, 0x5f, 0x1e, 0x7c,
	0xe1, 0x36, 0x40, 0x65, 0x35, 0x57, 0x59, 0x4a, 0x32, 0x2f, 0x49, 0x66, 0xf0, 0x74, 0x86, 0xe4,
	0x00, 0x00, 0x7f, 0xd6, 0x32, 0xdf, 0xf1, 0x1c, 0x53, 0xe9, 0x56, 0x54, 0xee, 0x5f, 0x57, 0x91,
	0xc2, 0x55, 0x25, 0x9c, 0x89, 0x17, 0x33, 0x70, 0x3d, 0x5b, 0xbd, 0xf9, 0xec, 0xf4, 0xa7, 0x51,
	0x38, 0x3d, 0x37, 0xb4, 0xb3, 0x73, 0x43, 0xfb, 0x71, 0x6e, 0x68, 0x1f, 0x2e, 0x8c, 0xc2, 0xd9,
	0x85, 0x51, 0xf8, 0x76, 0x61, 0x14, 0xf6, 0x6e, 0x7b, 0x24, 0x78, 0xdd, 0x6e, 0x58, 0xfb, 0xcc,
	0x97, 0x4e, 0xab, 0x0a, 0x26, 0xb6, 0x0d, 0xef, 0xda, 0x27, 0x89, 0x77, 0x63, 0x44, 0xfe, 0xeb,
	0xac, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x24, 0x1a, 0xed, 0x24, 0x24, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the x/metoken module.
	Params(ctx context.Context, in *QueryParams, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// RegisteredIndexes queries for a specific or all the registered indexes.
	RegisteredIndexes(ctx context.Context, in *QueryRegisteredIndexes, opts ...grpc.CallOption) (*QueryRegisteredIndexesResponse, error)
	// Fee queries for fee to be applied to a swap or a redemption.
	Fee(ctx context.Context, in *QueryFee, opts ...grpc.CallOption) (*QueryFeeResponse, error)
	// IndexLiquidity queries for Index's liquidity of a specific or all the registered indexes.
	IndexLiquidity(ctx context.Context, in *QueryIndexLiquidity, opts ...grpc.CallOption) (*QueryIndexLiquidityResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParams, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/umeenetwork.umee.metoken.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegisteredIndexes(ctx context.Context, in *QueryRegisteredIndexes, opts ...grpc.CallOption) (*QueryRegisteredIndexesResponse, error) {
	out := new(QueryRegisteredIndexesResponse)
	err := c.cc.Invoke(ctx, "/umeenetwork.umee.metoken.v1.Query/RegisteredIndexes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Fee(ctx context.Context, in *QueryFee, opts ...grpc.CallOption) (*QueryFeeResponse, error) {
	out := new(QueryFeeResponse)
	err := c.cc.Invoke(ctx, "/umeenetwork.umee.metoken.v1.Query/Fee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IndexLiquidity(ctx context.Context, in *QueryIndexLiquidity, opts ...grpc.CallOption) (*QueryIndexLiquidityResponse, error) {
	out := new(QueryIndexLiquidityResponse)
	err := c.cc.Invoke(ctx, "/umeenetwork.umee.metoken.v1.Query/IndexLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of the x/metoken module.
	Params(context.Context, *QueryParams) (*QueryParamsResponse, error)
	// RegisteredIndexes queries for a specific or all the registered indexes.
	RegisteredIndexes(context.Context, *QueryRegisteredIndexes) (*QueryRegisteredIndexesResponse, error)
	// Fee queries for fee to be applied to a swap or a redemption.
	Fee(context.Context, *QueryFee) (*QueryFeeResponse, error)
	// IndexLiquidity queries for Index's liquidity of a specific or all the registered indexes.
	IndexLiquidity(context.Context, *QueryIndexLiquidity) (*QueryIndexLiquidityResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParams) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) RegisteredIndexes(ctx context.Context, req *QueryRegisteredIndexes) (*QueryRegisteredIndexesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisteredIndexes not implemented")
}
func (*UnimplementedQueryServer) Fee(ctx context.Context, req *QueryFee) (*QueryFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fee not implemented")
}
func (*UnimplementedQueryServer) IndexLiquidity(ctx context.Context, req *QueryIndexLiquidity) (*QueryIndexLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexLiquidity not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umeenetwork.umee.metoken.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegisteredIndexes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRegisteredIndexes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegisteredIndexes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umeenetwork.umee.metoken.v1.Query/RegisteredIndexes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegisteredIndexes(ctx, req.(*QueryRegisteredIndexes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Fee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Fee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umeenetwork.umee.metoken.v1.Query/Fee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Fee(ctx, req.(*QueryFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IndexLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIndexLiquidity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IndexLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/umeenetwork.umee.metoken.v1.Query/IndexLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IndexLiquidity(ctx, req.(*QueryIndexLiquidity))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "umeenetwork.umee.metoken.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "RegisteredIndexes",
			Handler:    _Query_RegisteredIndexes_Handler,
		},
		{
			MethodName: "Fee",
			Handler:    _Query_Fee_Handler,
		},
		{
			MethodName: "IndexLiquidity",
			Handler:    _Query_IndexLiquidity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "umee/metoken/v1/query.proto",
}

func (m *QueryParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredIndexes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredIndexes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredIndexes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MetokenDenom) > 0 {
		i -= len(m.MetokenDenom)
		copy(dAtA[i:], m.MetokenDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MetokenDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredIndexesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredIndexesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredIndexesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Registry) > 0 {
		for iNdEx := len(m.Registry) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Registry[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Operation) > 0 {
		i -= len(m.Operation)
		copy(dAtA[i:], m.Operation)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Operation)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MetokenDenom) > 0 {
		i -= len(m.MetokenDenom)
		copy(dAtA[i:], m.MetokenDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MetokenDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryIndexLiquidity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIndexLiquidity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIndexLiquidity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MetokenDenom) > 0 {
		i -= len(m.MetokenDenom)
		copy(dAtA[i:], m.MetokenDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MetokenDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIndexLiquidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIndexLiquidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIndexLiquidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IndexLiquidity) > 0 {
		for iNdEx := len(m.IndexLiquidity) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IndexLiquidity[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IndexLiquidity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexLiquidity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexLiquidity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetInFees) > 0 {
		for iNdEx := len(m.AssetInFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetInFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.AssetInReserves) > 0 {
		for iNdEx := len(m.AssetInReserves) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetInReserves[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AssetInLeverage) > 0 {
		for iNdEx := len(m.AssetInLeverage) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetInLeverage[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.MetokenMinted != nil {
		{
			size, err := m.MetokenMinted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRegisteredIndexes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MetokenDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRegisteredIndexesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Registry) > 0 {
		for _, e := range m.Registry {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MetokenDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Operation)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Asset.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Asset.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryIndexLiquidity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MetokenDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIndexLiquidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IndexLiquidity) > 0 {
		for _, e := range m.IndexLiquidity {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *IndexLiquidity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MetokenMinted != nil {
		l = m.MetokenMinted.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.AssetInLeverage) > 0 {
		for _, e := range m.AssetInLeverage {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.AssetInReserves) > 0 {
		for _, e := range m.AssetInReserves {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.AssetInFees) > 0 {
		for _, e := range m.AssetInFees {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredIndexes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredIndexes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredIndexes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredIndexesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredIndexesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredIndexesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registry = append(m.Registry, Index{})
			if err := m.Registry[len(m.Registry)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIndexLiquidity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIndexLiquidity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIndexLiquidity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIndexLiquidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIndexLiquidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIndexLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexLiquidity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexLiquidity = append(m.IndexLiquidity, IndexLiquidity{})
			if err := m.IndexLiquidity[len(m.IndexLiquidity)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexLiquidity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexLiquidity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexLiquidity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetokenMinted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetokenMinted == nil {
				m.MetokenMinted = &types.Coin{}
			}
			if err := m.MetokenMinted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetInLeverage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetInLeverage = append(m.AssetInLeverage, &types.Coin{})
			if err := m.AssetInLeverage[len(m.AssetInLeverage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetInReserves", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetInReserves = append(m.AssetInReserves, &types.Coin{})
			if err := m.AssetInReserves[len(m.AssetInReserves)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetInFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetInFees = append(m.AssetInFees, &types.Coin{})
			if err := m.AssetInFees[len(m.AssetInFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
