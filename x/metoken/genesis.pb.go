// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: umee/metoken/v1/genesis.proto

package metoken

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the x/metoken module's genesis state.
type GenesisState struct {
	Params               Params                                   `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	Registry             []Index                                  `protobuf:"bytes,2,rep,name=registry,proto3" json:"registry"`
	AssetInLeverage      github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=asset_in_leverage,json=assetInLeverage,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"asset_in_leverage"`
	NextRebalancingBlock uint64                                   `protobuf:"varint,4,opt,name=next_rebalancing_block,json=nextRebalancingBlock,proto3" json:"next_rebalancing_block,omitempty"`
	MetokenSupply        github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=metoken_supply,json=metokenSupply,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"metoken_supply"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_5df2a396d6481bf7, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetRegistry() []Index {
	if m != nil {
		return m.Registry
	}
	return nil
}

func (m *GenesisState) GetAssetInLeverage() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.AssetInLeverage
	}
	return nil
}

func (m *GenesisState) GetNextRebalancingBlock() uint64 {
	if m != nil {
		return m.NextRebalancingBlock
	}
	return 0
}

func (m *GenesisState) GetMetokenSupply() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.MetokenSupply
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "umeenetwork.umee.metoken.v1.GenesisState")
}

func init() { proto.RegisterFile("umee/metoken/v1/genesis.proto", fileDescriptor_5df2a396d6481bf7) }

var fileDescriptor_5df2a396d6481bf7 = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0x4d, 0xce, 0xd3, 0x30,
	0x10, 0x4d, 0x68, 0xf9, 0x84, 0xf2, 0xf1, 0x23, 0xa2, 0x0a, 0x85, 0x22, 0xd2, 0xaa, 0x6c, 0xc2,
	0xa2, 0x36, 0x29, 0xbd, 0x00, 0x29, 0x12, 0xaa, 0xc4, 0x02, 0xa5, 0x3b, 0x36, 0x91, 0x93, 0x8e,
	0x42, 0x94, 0xc4, 0x8e, 0x6c, 0x37, 0x6d, 0x6f, 0xc1, 0x39, 0x38, 0x02, 0x27, 0xe8, 0xb2, 0x4b,
	0x56, 0x80, 0xda, 0x8b, 0x20, 0x3b, 0x2e, 0x20, 0x21, 0x75, 0xc5, 0xca, 0x63, 0xbf, 0x79, 0xef,
	0x8d, 0x9f, 0xc6, 0x79, 0xbe, 0xa9, 0x01, 0x70, 0x0d, 0x92, 0x95, 0x40, 0x71, 0x1b, 0xe2, 0x1c,
	0x28, 0x88, 0x42, 0xa0, 0x86, 0x33, 0xc9, 0xdc, 0x67, 0x0a, 0xa6, 0x20, 0xb7, 0x8c, 0x97, 0x48,
	0xd5, 0xc8, 0xb4, 0xa2, 0x36, 0x1c, 0xfa, 0x19, 0x13, 0x35, 0x13, 0x38, 0x25, 0x02, 0x70, 0x1b,
	0xa6, 0x20, 0x49, 0x88, 0x33, 0x56, 0xd0, 0x8e, 0x3c, 0x1c, 0xe4, 0x2c, 0x67, 0xba, 0xc4, 0xaa,
	0x32, 0xaf, 0xff, 0x38, 0x5e, 0x14, 0x35, 0x3c, 0xf9, 0xda, 0x73, 0xee, 0xbf, 0xeb, 0x66, 0x58,
	0x49, 0x22, 0xc1, 0x7d, 0xe3, 0xdc, 0x34, 0x84, 0x93, 0x5a, 0x78, 0xf6, 0xd8, 0x0e, 0x6e, 0x67,
	0x2f, 0xd0, 0x95, 0x99, 0xd0, 0x07, 0xdd, 0x1a, 0xf5, 0x0f, 0xdf, 0x47, 0x56, 0x6c, 0x88, 0xee,
	0x5b, 0xe7, 0x1e, 0x87, 0xbc, 0x10, 0x92, 0xef, 0xbd, 0x3b, 0xe3, 0x5e, 0x70, 0x3b, 0x9b, 0x5c,
	0x15, 0x59, 0xd2, 0x35, 0xec, 0x8c, 0xc6, 0x6f, 0xa6, 0xbb, 0x75, 0x1e, 0x13, 0x21, 0x40, 0x26,
	0x05, 0x4d, 0x2a, 0x68, 0x81, 0x93, 0x1c, 0xbc, 0x9e, 0x96, 0x7b, 0x8a, 0xba, 0x28, 0x90, 0x8a,
	0x02, 0x99, 0x28, 0xd0, 0x82, 0x15, 0x34, 0x7a, 0xa5, 0x54, 0xbe, 0xfc, 0x18, 0x05, 0x79, 0x21,
	0x3f, 0x6d, 0x52, 0x94, 0xb1, 0x1a, 0x9b, 0xdc, 0xba, 0x63, 0x2a, 0xd6, 0x25, 0x96, 0xfb, 0x06,
	0x84, 0x26, 0x88, 0xf8, 0x91, 0x76, 0x59, 0xd2, 0xf7, 0xc6, 0xc3, 0x9d, 0x3b, 0x4f, 0x28, 0xec,
	0x64, 0xc2, 0x21, 0x25, 0x15, 0xa1, 0x59, 0x41, 0xf3, 0x24, 0xad, 0x58, 0x56, 0x7a, 0xfd, 0xb1,
	0x1d, 0xf4, 0xe3, 0x81, 0x42, 0xe3, 0x3f, 0x60, 0xa4, 0x30, 0x97, 0x3b, 0x0f, 0xcd, 0x97, 0x12,
	0xb1, 0x69, 0x9a, 0x6a, 0xef, 0xdd, 0xfd, 0xff, 0xb3, 0x3e, 0x30, 0x16, 0x2b, 0xed, 0x10, 0x2d,
	0x0e, 0x27, 0xdf, 0x3e, 0x9e, 0x7c, 0xfb, 0xe7, 0xc9, 0xb7, 0x3f, 0x9f, 0x7d, 0xeb, 0x78, 0xf6,
	0xad, 0x6f, 0x67, 0xdf, 0xfa, 0xf8, 0xf2, 0x2f, 0x49, 0x15, 0xf7, 0xd4, 0x64, 0xaf, 0x2f, 0xb8,
	0x9d, 0xe3, 0xdd, 0x65, 0x0f, 0xd2, 0x1b, 0xbd, 0x08, 0xaf, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x38, 0x5d, 0xa6, 0xa5, 0x9b, 0x02, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MetokenSupply) > 0 {
		for iNdEx := len(m.MetokenSupply) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MetokenSupply[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.NextRebalancingBlock != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.NextRebalancingBlock))
		i--
		dAtA[i] = 0x20
	}
	if len(m.AssetInLeverage) > 0 {
		for iNdEx := len(m.AssetInLeverage) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetInLeverage[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Registry) > 0 {
		for iNdEx := len(m.Registry) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Registry[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.Registry) > 0 {
		for _, e := range m.Registry {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.AssetInLeverage) > 0 {
		for _, e := range m.AssetInLeverage {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.NextRebalancingBlock != 0 {
		n += 1 + sovGenesis(uint64(m.NextRebalancingBlock))
	}
	if len(m.MetokenSupply) > 0 {
		for _, e := range m.MetokenSupply {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registry = append(m.Registry, Index{})
			if err := m.Registry[len(m.Registry)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetInLeverage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetInLeverage = append(m.AssetInLeverage, types.Coin{})
			if err := m.AssetInLeverage[len(m.AssetInLeverage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRebalancingBlock", wireType)
			}
			m.NextRebalancingBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextRebalancingBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetokenSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetokenSupply = append(m.MetokenSupply, types.Coin{})
			if err := m.MetokenSupply[len(m.MetokenSupply)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
